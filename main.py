import os
from flask import Flask, request, jsonify
import requests
import random
import json
import datetime
from collections import Counter
import google.generativeai as genai
app = Flask(__name__)


GEMINI_TOKEN = os.getenv("GENIUS_API_KEY")
genai.configure(api_key=os.getenv("GENIUS_API_KEY"))
API_KEY = os.getenv("BOT_TOKEN")
BASE_URL = f"https://bot-api.zapps.me/bot{API_KEY}"

SECRET_TOKEN = os.getenv("SECRET_TOKEN")

model = genai.GenerativeModel("gemini-2.5-flash")

def ask_gemini(prompt: str) -> str:
    """G·ª≠i c√¢u h·ªèi t·ªõi Gemini v√† tr·∫£ l·ªùi"""
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi g·ªçi Gemini: {e}"
    
def get_vietlott_today() -> str:
    """Tr·∫£ v·ªÅ b·ªô s·ªë Vietlott d·ª±a tr√™n ng√†y trong tu·∫ßn"""   
    today = datetime.datetime.today().weekday()

    if today in [1, 3, 5]:  # Th·ª© 3, 5, 7
        return f"H√¥m nay l√† th·ª© {today+2}, b·ªô s·ªë 6/55 c·ªßa b·∫°n: {generate_vietlott_numbers(55)}"
    elif today in [2, 4, 6]:  # Th·ª© 4, 6, CN
        return f"H√¥m nay l√† th·ª© {today+2}, b·ªô s·ªë 6/45 c·ªßa b·∫°n: {generate_vietlott_numbers(45)}"


def generate_vietlott_numbers(max_number: int, count: int = 6) -> str:
    """T·∫°o b·ªô s·ªë Vietlott ng·∫´u nhi√™n"""
    numbers = random.sample(range(1, max_number + 1), count)
    numbers.sort()
    return " ".join(str(n) for n in numbers)

def choose_carefully(max_number: int, simulations: int = 100, count: int = 6) -> str:
    """Ch·ªçn b·ªô s·ªë Vietlott d·ª±a tr√™n t·∫ßn su·∫•t xu·∫•t hi·ªán trong c√°c m√¥ ph·ªèng"""
    freq = Counter()

    for _ in range(simulations):
        nums = random.sample(range(1, max_number + 1), count)
        freq.update(nums)

    most_common_nums = [num for num, _ in freq.most_common(count)]
    most_common_nums.sort()

    return " ".join(str(n) for n in most_common_nums)

def send_message(chat_id, text):
    """G·ª≠i tin nh·∫Øn vƒÉn b·∫£n cho ng∆∞·ªùi d√πng"""
    url = f"{BASE_URL}/sendMessage"
    headers = {"Content-Type": "application/json"}
    data = {
        "chat_id": chat_id,
        "text": text
    }
    response = requests.post(url, headers=headers, json=data)
    print("Send response:", response.text)
    return response.json()

def get_bot_reply(user_text: str) -> str:
    """
    X·ª≠ l√Ω logic h·ªôi tho·∫°i v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi
    """
    text = user_text.strip().lower()

    if text == "hello" or text == "hi" or text == "ch√†o":
        return "Xin ch√†o! ü§ñ M√¨nh l√† bot c·ªßa b·∫°n."
    elif text == "info" or text == "th√¥ng tin" or text == "gi·ªõi thi·ªáu":
        return "M√¨nh ƒë∆∞·ª£c vi·∫øt b·∫±ng Python Flask, ch·∫°y 24/7 tr√™n Render üöÄ"
    elif text == "vietlott 6/45" or text == "6/45":
        return f"B·ªô s·ªë 6/45 c·ªßa b·∫°n l√†: {generate_vietlott_numbers(45)}"
    elif text == "vietlott 6/55" or text == "6/55":
        return f"B·ªô s·ªë 6/55 c·ªßa b·∫°n l√†: {generate_vietlott_numbers(55)}"
    elif text == "vietlott h√¥m nay" or text == "cho s·ªë ngay" or text == "s·ªë ngay" or text == "s·ªë vietlott h√¥m nay" or text == "h√¥m nay":
        return get_vietlott_today()
    elif text == "vietlott careful 6/45" or text == "k·ªπ 6/45":
        return f"B·ªô s·ªë ch·ªçn k·ªπ l∆∞·ª°ng 6/45: {choose_carefully(45)}"
    elif text == "vietlott careful 6/55" or text == "k·ªπ 6/55":
        return f"B·ªô s·ªë ch·ªçn k·ªπ l∆∞·ª°ng 6/55: {choose_carefully(55)}"
    else:
        return ask_gemini(user_text)

@app.route("/webhook", methods=["POST"])
def webhook():
    """Nh·∫≠n s·ª± ki·ªán t·ª´ Zalo g·ª≠i v·ªÅ"""

    token = request.headers.get("X-Bot-Api-Secret-Token")
    if token != SECRET_TOKEN:
        return jsonify({"error": "Invalid secret token"}), 403

    data = request.json
    print("Webhook nh·∫≠n:", data)

    if data and "message" in data:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"].get("text", "")
        if text:
            reply = get_bot_reply(text)
            send_message(chat_id, reply)

    return jsonify({"status": "ok"})

@app.route("/")
def home():
    return "Zalo Bot Server ƒëang ch·∫°y!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)